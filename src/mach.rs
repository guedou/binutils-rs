// Guillaume Valadon <guillaume@valadon.net>
// binutils - mach.rs

#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(unknown_lints)]
#![allow(clippy::all)]

// Manually generate for binutils-2.29.1
pub const bfd_mach_m68000: u64 = 1;
pub const bfd_mach_m68008: u64 = 2;
pub const bfd_mach_m68010: u64 = 3;
pub const bfd_mach_m68020: u64 = 4;
pub const bfd_mach_m68030: u64 = 5;
pub const bfd_mach_m68040: u64 = 6;
pub const bfd_mach_m68060: u64 = 7;
pub const bfd_mach_cpu64: u64 = 8;
pub const bfd_mach_fido: u64 = 9;
pub const bfd_mach_mcf_isa_a_nodiv: u64 = 10;
pub const bfd_mach_mcf_isa_a: u64 = 11;
pub const bfd_mach_mcf_isa_a_mac: u64 = 12;
pub const bfd_mach_mcf_isa_a_emac: u64 = 13;
pub const bfd_mach_mcf_isa_aplus: u64 = 14;
pub const bfd_mach_mcf_isa_aplus_mac: u64 = 15;
pub const bfd_mach_mcf_isa_aplus_emac: u64 = 16;
pub const bfd_mach_mcf_isa_b_nousp: u64 = 17;
pub const bfd_mach_mcf_isa_b_nousp_mac: u64 = 18;
pub const bfd_mach_mcf_isa_b_nousp_emac: u64 = 19;
pub const bfd_mach_mcf_isa_b: u64 = 20;
pub const bfd_mach_mcf_isa_b_mac: u64 = 21;
pub const bfd_mach_mcf_isa_b_emac: u64 = 22;
pub const bfd_mach_mcf_isa_b_float: u64 = 23;
pub const bfd_mach_mcf_isa_b_float_mac: u64 = 24;
pub const bfd_mach_mcf_isa_b_float_emac: u64 = 25;
pub const bfd_mach_mcf_isa_c: u64 = 26;
pub const bfd_mach_mcf_isa_c_mac: u64 = 27;
pub const bfd_mach_mcf_isa_c_emac: u64 = 28;
pub const bfd_mach_mcf_isa_c_nodiv: u64 = 29;
pub const bfd_mach_mcf_isa_c_nodiv_mac: u64 = 30;
pub const bfd_mach_mcf_isa_c_nodiv_emac: u64 = 31;
pub const bfd_mach_i960_core: u64 = 1;
pub const bfd_mach_i960_ka_sa: u64 = 2;
pub const bfd_mach_i960_kb_sb: u64 = 3;
pub const bfd_mach_i960_mc: u64 = 4;
pub const bfd_mach_i960_xa: u64 = 5;
pub const bfd_mach_i960_ca: u64 = 6;
pub const bfd_mach_i960_jx: u64 = 7;
pub const bfd_mach_i960_hx: u64 = 8;
pub const bfd_mach_or1k: u64 = 1;
pub const bfd_mach_or1knd: u64 = 2;
pub const bfd_mach_sparc: u64 = 1;
pub const bfd_mach_sparc_sparclet: u64 = 2;
pub const bfd_mach_sparc_sparclite: u64 = 3;
pub const bfd_mach_sparc_v8plus: u64 = 4;
pub const bfd_mach_sparc_v8plusa: u64 = 5 /* with ultrasparc add'ns. */;
pub const bfd_mach_sparc_sparclite_le: u64 = 6;
pub const bfd_mach_sparc_v9: u64 = 7;
pub const bfd_mach_sparc_v9a: u64 = 8 /* with ultrasparc add'ns. */;
pub const bfd_mach_sparc_v8plusb: u64 = 9 /* with cheetah add'ns. */;
pub const bfd_mach_sparc_v9b: u64 = 10 /* with cheetah add'ns. */;
pub const bfd_mach_sparc_v8plusc: u64 = 11 /* with UA2005 and T1 add'ns. */;
pub const bfd_mach_sparc_v9c: u64 = 12 /* with UA2005 and T1 add'ns. */;
pub const bfd_mach_sparc_v8plusd: u64 = 13 /* with UA2007 and T3 add'ns. */;
pub const bfd_mach_sparc_v9d: u64 = 14 /* with UA2007 and T3 add'ns. */;
pub const bfd_mach_sparc_v8pluse: u64 = 15 /* with OSA2001 and T4 add'ns (no IMA). */;
pub const bfd_mach_sparc_v9e: u64 = 16 /* with OSA2001 and T4 add'ns (no IMA). */;
pub const bfd_mach_sparc_v8plusv: u64 = 17 /* with OSA2011 and T4 and IMA and FJMAU add'ns. */;
pub const bfd_mach_sparc_v9v: u64 = 18 /* with OSA2011 and T4 and IMA and FJMAU add'ns. */;
pub const bfd_mach_sparc_v8plusm: u64 = 19 /* with OSA2015 and M7 add'ns. */;
pub const bfd_mach_sparc_v9m: u64 = 20 /* with OSA2015 and M7 add'ns. */;
pub const bfd_mach_sparc_v8plusm8: u64 = 21 /* with OSA2017 and M8 add'ns. */;
pub const bfd_mach_sparc_v9m8: u64 = 22 /* with OSA2017 and M8 add'ns. */;
pub const bfd_mach_spu: u64 = 256;
pub const bfd_mach_mips3000: u64 = 3000;
pub const bfd_mach_mips3900: u64 = 3900;
pub const bfd_mach_mips4000: u64 = 4000;
pub const bfd_mach_mips4010: u64 = 4010;
pub const bfd_mach_mips4100: u64 = 4100;
pub const bfd_mach_mips4111: u64 = 4111;
pub const bfd_mach_mips4120: u64 = 4120;
pub const bfd_mach_mips4300: u64 = 4300;
pub const bfd_mach_mips4400: u64 = 4400;
pub const bfd_mach_mips4600: u64 = 4600;
pub const bfd_mach_mips4650: u64 = 4650;
pub const bfd_mach_mips5000: u64 = 5000;
pub const bfd_mach_mips5400: u64 = 5400;
pub const bfd_mach_mips5500: u64 = 5500;
pub const bfd_mach_mips5900: u64 = 5900;
pub const bfd_mach_mips6000: u64 = 6000;
pub const bfd_mach_mips7000: u64 = 7000;
pub const bfd_mach_mips8000: u64 = 8000;
pub const bfd_mach_mips9000: u64 = 9000;
pub const bfd_mach_mips10000: u64 = 10000;
pub const bfd_mach_mips12000: u64 = 12000;
pub const bfd_mach_mips14000: u64 = 14000;
pub const bfd_mach_mips16000: u64 = 16000;
pub const bfd_mach_mips16: u64 = 16;
pub const bfd_mach_mips5: u64 = 5;
pub const bfd_mach_mips_loongson_2e: u64 = 3001;
pub const bfd_mach_mips_loongson_2f: u64 = 3002;
pub const bfd_mach_mips_loongson_3a: u64 = 3003;
pub const bfd_mach_mips_sb1: u64 = 12310201 /* octal 'SB', 01 */;
pub const bfd_mach_mips_octeon: u64 = 6501;
pub const bfd_mach_mips_octeonp: u64 = 6601;
pub const bfd_mach_mips_octeon2: u64 = 6502;
pub const bfd_mach_mips_octeon3: u64 = 6503;
pub const bfd_mach_mips_xlr: u64 = 887682 /* decimal 'XLR' */;
pub const bfd_mach_mips_interaptiv_mr2: u64 = 736550 /* decimal 'IA2' */;
pub const bfd_mach_mipsisa32: u64 = 32;
pub const bfd_mach_mipsisa32r2: u64 = 33;
pub const bfd_mach_mipsisa32r3: u64 = 34;
pub const bfd_mach_mipsisa32r5: u64 = 36;
pub const bfd_mach_mipsisa32r6: u64 = 37;
pub const bfd_mach_mipsisa64: u64 = 64;
pub const bfd_mach_mipsisa64r2: u64 = 65;
pub const bfd_mach_mipsisa64r3: u64 = 66;
pub const bfd_mach_mipsisa64r5: u64 = 68;
pub const bfd_mach_mipsisa64r6: u64 = 69;
pub const bfd_mach_mips_micromips: u64 = 96;
pub const bfd_mach_i386_intel_syntax: u64 = (1 << 0);
pub const bfd_mach_i386_i8086: u64 = (1 << 1);
pub const bfd_mach_i386_i386: u64 = (1 << 2);
pub const bfd_mach_x86_64: u64 = (1 << 3);
pub const bfd_mach_x64_32: u64 = (1 << 4);
pub const bfd_mach_i386_i386_intel_syntax: u64 = (bfd_mach_i386_i386 | bfd_mach_i386_intel_syntax);
pub const bfd_mach_x86_64_intel_syntax: u64 = (bfd_mach_x86_64 | bfd_mach_i386_intel_syntax);
pub const bfd_mach_x64_32_intel_syntax: u64 = (bfd_mach_x64_32 | bfd_mach_i386_intel_syntax);
pub const bfd_mach_l1om: u64 = (1 << 5);
pub const bfd_mach_l1om_intel_syntax: u64 = (bfd_mach_l1om | bfd_mach_i386_intel_syntax);
pub const bfd_mach_k1om: u64 = (1 << 6);
pub const bfd_mach_k1om_intel_syntax: u64 = (bfd_mach_k1om | bfd_mach_i386_intel_syntax);
pub const bfd_mach_i386_nacl: u64 = (1 << 7);
pub const bfd_mach_i386_i386_nacl: u64 = (bfd_mach_i386_i386 | bfd_mach_i386_nacl);
pub const bfd_mach_x86_64_nacl: u64 = (bfd_mach_x86_64 | bfd_mach_i386_nacl);
pub const bfd_mach_x64_32_nacl: u64 = (bfd_mach_x64_32 | bfd_mach_i386_nacl);
pub const bfd_mach_iamcu: u64 = (1 << 8);
pub const bfd_mach_i386_iamcu: u64 = (bfd_mach_i386_i386 | bfd_mach_iamcu);
pub const bfd_mach_i386_iamcu_intel_syntax: u64 =
    (bfd_mach_i386_iamcu | bfd_mach_i386_intel_syntax);
pub const bfd_mach_h8300: u64 = 1;
pub const bfd_mach_h8300h: u64 = 2;
pub const bfd_mach_h8300s: u64 = 3;
pub const bfd_mach_h8300hn: u64 = 4;
pub const bfd_mach_h8300sn: u64 = 5;
pub const bfd_mach_h8300sx: u64 = 6;
pub const bfd_mach_h8300sxn: u64 = 7;
pub const bfd_mach_ppc: u64 = 32;
pub const bfd_mach_ppc64: u64 = 64;
pub const bfd_mach_ppc_403: u64 = 403;
pub const bfd_mach_ppc_403gc: u64 = 4030;
pub const bfd_mach_ppc_405: u64 = 405;
pub const bfd_mach_ppc_505: u64 = 505;
pub const bfd_mach_ppc_601: u64 = 601;
pub const bfd_mach_ppc_602: u64 = 602;
pub const bfd_mach_ppc_603: u64 = 603;
pub const bfd_mach_ppc_ec603e: u64 = 6031;
pub const bfd_mach_ppc_604: u64 = 604;
pub const bfd_mach_ppc_620: u64 = 620;
pub const bfd_mach_ppc_630: u64 = 630;
pub const bfd_mach_ppc_750: u64 = 750;
pub const bfd_mach_ppc_860: u64 = 860;
pub const bfd_mach_ppc_a35: u64 = 35;
pub const bfd_mach_ppc_rs64ii: u64 = 642;
pub const bfd_mach_ppc_rs64iii: u64 = 643;
pub const bfd_mach_ppc_7400: u64 = 7400;
pub const bfd_mach_ppc_e500: u64 = 500;
pub const bfd_mach_ppc_e500mc: u64 = 5001;
pub const bfd_mach_ppc_e500mc64: u64 = 5005;
pub const bfd_mach_ppc_e5500: u64 = 5006;
pub const bfd_mach_ppc_e6500: u64 = 5007;
pub const bfd_mach_ppc_titan: u64 = 83;
pub const bfd_mach_ppc_vle: u64 = 84;
pub const bfd_mach_rs6k: u64 = 6000;
pub const bfd_mach_rs6k_rs1: u64 = 6001;
pub const bfd_mach_rs6k_rsc: u64 = 6003;
pub const bfd_mach_rs6k_rs2: u64 = 6002;
pub const bfd_mach_hppa10: u64 = 10;
pub const bfd_mach_hppa11: u64 = 11;
pub const bfd_mach_hppa20: u64 = 20;
pub const bfd_mach_hppa20w: u64 = 25;
pub const bfd_mach_d10v: u64 = 1;
pub const bfd_mach_d10v_ts2: u64 = 2;
pub const bfd_mach_d10v_ts3: u64 = 3;
pub const bfd_mach_m6812_default: u64 = 0;
pub const bfd_mach_m6812: u64 = 1;
pub const bfd_mach_m6812s: u64 = 2;
pub const bfd_mach_z8001: u64 = 1;
pub const bfd_mach_z8002: u64 = 2;
pub const bfd_mach_sh: u64 = 1;
pub const bfd_mach_sh2: u64 = 0x20;
pub const bfd_mach_sh_dsp: u64 = 0x2d;
pub const bfd_mach_sh2a: u64 = 0x2a;
pub const bfd_mach_sh2a_nofpu: u64 = 0x2b;
pub const bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu: u64 = 0x2a1;
pub const bfd_mach_sh2a_nofpu_or_sh3_nommu: u64 = 0x2a2;
pub const bfd_mach_sh2a_or_sh4: u64 = 0x2a3;
pub const bfd_mach_sh2a_or_sh3e: u64 = 0x2a4;
pub const bfd_mach_sh2e: u64 = 0x2e;
pub const bfd_mach_sh3: u64 = 0x30;
pub const bfd_mach_sh3_nommu: u64 = 0x31;
pub const bfd_mach_sh3_dsp: u64 = 0x3d;
pub const bfd_mach_sh3e: u64 = 0x3e;
pub const bfd_mach_sh4: u64 = 0x40;
pub const bfd_mach_sh4_nofpu: u64 = 0x41;
pub const bfd_mach_sh4_nommu_nofpu: u64 = 0x42;
pub const bfd_mach_sh4a: u64 = 0x4a;
pub const bfd_mach_sh4a_nofpu: u64 = 0x4b;
pub const bfd_mach_sh4al_dsp: u64 = 0x4d;
pub const bfd_mach_sh5: u64 = 0x50;
pub const bfd_mach_alpha_ev4: u64 = 0x10;
pub const bfd_mach_alpha_ev5: u64 = 0x20;
pub const bfd_mach_alpha_ev6: u64 = 0x30;
pub const bfd_mach_arm_unknown: u64 = 0;
pub const bfd_mach_arm_2: u64 = 1;
pub const bfd_mach_arm_2a: u64 = 2;
pub const bfd_mach_arm_3: u64 = 3;
pub const bfd_mach_arm_3M: u64 = 4;
pub const bfd_mach_arm_4: u64 = 5;
pub const bfd_mach_arm_4T: u64 = 6;
pub const bfd_mach_arm_5: u64 = 7;
pub const bfd_mach_arm_5T: u64 = 8;
pub const bfd_mach_arm_5TE: u64 = 9;
pub const bfd_mach_arm_XScale: u64 = 10;
pub const bfd_mach_arm_ep9312: u64 = 11;
pub const bfd_mach_arm_iWMMXt: u64 = 12;
pub const bfd_mach_arm_iWMMXt2: u64 = 13;
pub const bfd_mach_n1: u64 = 1;
pub const bfd_mach_n1h: u64 = 2;
pub const bfd_mach_n1h_v2: u64 = 3;
pub const bfd_mach_n1h_v3: u64 = 4;
pub const bfd_mach_n1h_v3m: u64 = 5;
pub const bfd_mach_tic3x: u64 = 30;
pub const bfd_mach_tic4x: u64 = 40;
pub const bfd_mach_v850: u64 = 1;
pub const bfd_mach_v850e: u64 = 'E' as u64;
pub const bfd_mach_v850e1: u64 = '1' as u64;
pub const bfd_mach_v850e2: u64 = 0x4532;
pub const bfd_mach_v850e2v3: u64 = 0x45325633;
pub const bfd_mach_v850e3v5: u64 = 0x45335635 /* ('E'|'3'|'V'|'5') */;
pub const bfd_mach_arc_a4: u64 = 0;
pub const bfd_mach_arc_a5: u64 = 1;
pub const bfd_mach_arc_arc600: u64 = 2;
pub const bfd_mach_arc_arc601: u64 = 4;
pub const bfd_mach_arc_arc700: u64 = 3;
pub const bfd_mach_arc_arcv2: u64 = 5;
pub const bfd_mach_m16c: u64 = 0x75;
pub const bfd_mach_m32c: u64 = 0x78;
pub const bfd_mach_m32r: u64 = 1 /* For backwards compatibility. */;
pub const bfd_mach_m32rx: u64 = 'x' as u64;
pub const bfd_mach_m32r2: u64 = '2' as u64;
pub const bfd_mach_mn10300: u64 = 300;
pub const bfd_mach_am33: u64 = 330;
pub const bfd_mach_am33_2: u64 = 332;
pub const bfd_mach_fr30: u64 = 0x46523330;
pub const bfd_mach_frv: u64 = 1;
pub const bfd_mach_frvsimple: u64 = 2;
pub const bfd_mach_fr300: u64 = 300;
pub const bfd_mach_fr400: u64 = 400;
pub const bfd_mach_fr450: u64 = 450;
pub const bfd_mach_frvtomcat: u64 = 499 /* fr500 prototype */;
pub const bfd_mach_fr500: u64 = 500;
pub const bfd_mach_fr550: u64 = 550;
pub const bfd_mach_moxie: u64 = 1;
pub const bfd_mach_ft32: u64 = 1;
pub const bfd_mach_mep: u64 = 1;
pub const bfd_mach_mep_h1: u64 = 0x6831;
pub const bfd_mach_mep_c5: u64 = 0x6335;
pub const bfd_mach_metag: u64 = 1;
pub const bfd_mach_ia64_elf64: u64 = 64;
pub const bfd_mach_ia64_elf32: u64 = 32;
pub const bfd_mach_ip2022: u64 = 1;
pub const bfd_mach_ip2022ext: u64 = 2;
pub const bfd_mach_iq2000: u64 = 1;
pub const bfd_mach_iq10: u64 = 2;
pub const bfd_mach_epiphany16: u64 = 1;
pub const bfd_mach_epiphany32: u64 = 2;
pub const bfd_mach_ms1: u64 = 1;
pub const bfd_mach_mrisc2: u64 = 2;
pub const bfd_mach_ms2: u64 = 3;
pub const bfd_mach_avr1: u64 = 1;
pub const bfd_mach_avr2: u64 = 2;
pub const bfd_mach_avr25: u64 = 25;
pub const bfd_mach_avr3: u64 = 3;
pub const bfd_mach_avr31: u64 = 31;
pub const bfd_mach_avr35: u64 = 35;
pub const bfd_mach_avr4: u64 = 4;
pub const bfd_mach_avr5: u64 = 5;
pub const bfd_mach_avr51: u64 = 51;
pub const bfd_mach_avr6: u64 = 6;
pub const bfd_mach_avrtiny: u64 = 100;
pub const bfd_mach_avrxmega1: u64 = 101;
pub const bfd_mach_avrxmega2: u64 = 102;
pub const bfd_mach_avrxmega3: u64 = 103;
pub const bfd_mach_avrxmega4: u64 = 104;
pub const bfd_mach_avrxmega5: u64 = 105;
pub const bfd_mach_avrxmega6: u64 = 106;
pub const bfd_mach_avrxmega7: u64 = 107;
pub const bfd_mach_bfin: u64 = 1;
pub const bfd_mach_cr16: u64 = 1;
pub const bfd_mach_cr16c: u64 = 1;
pub const bfd_mach_crx: u64 = 1;
pub const bfd_mach_cris_v0_v10: u64 = 255;
pub const bfd_mach_cris_v32: u64 = 32;
pub const bfd_mach_cris_v10_v32: u64 = 1032;
pub const bfd_mach_riscv32: u64 = 132;
pub const bfd_mach_riscv64: u64 = 164;
pub const bfd_mach_rl78: u64 = 0x75;
pub const bfd_mach_rx: u64 = 0x75;
pub const bfd_mach_s390_31: u64 = 31;
pub const bfd_mach_s390_64: u64 = 64;
pub const bfd_mach_score3: u64 = 3;
pub const bfd_mach_score7: u64 = 7;
pub const bfd_mach_xstormy16: u64 = 1;
pub const bfd_mach_msp11: u64 = 11;
pub const bfd_mach_msp110: u64 = 110;
pub const bfd_mach_msp12: u64 = 12;
pub const bfd_mach_msp13: u64 = 13;
pub const bfd_mach_msp14: u64 = 14;
pub const bfd_mach_msp15: u64 = 15;
pub const bfd_mach_msp16: u64 = 16;
pub const bfd_mach_msp20: u64 = 20;
pub const bfd_mach_msp21: u64 = 21;
pub const bfd_mach_msp22: u64 = 22;
pub const bfd_mach_msp23: u64 = 23;
pub const bfd_mach_msp24: u64 = 24;
pub const bfd_mach_msp26: u64 = 26;
pub const bfd_mach_msp31: u64 = 31;
pub const bfd_mach_msp32: u64 = 32;
pub const bfd_mach_msp33: u64 = 33;
pub const bfd_mach_msp41: u64 = 41;
pub const bfd_mach_msp42: u64 = 42;
pub const bfd_mach_msp43: u64 = 43;
pub const bfd_mach_msp44: u64 = 44;
pub const bfd_mach_msp430x: u64 = 45;
pub const bfd_mach_msp46: u64 = 46;
pub const bfd_mach_msp47: u64 = 47;
pub const bfd_mach_msp54: u64 = 54;
pub const bfd_mach_xc16x: u64 = 1;
pub const bfd_mach_xc16xl: u64 = 2;
pub const bfd_mach_xc16xs: u64 = 3;
pub const bfd_mach_xgate: u64 = 1;
pub const bfd_mach_xtensa: u64 = 1;
pub const bfd_mach_z80strict: u64 = 1 /* No undocumented opcodes. */;
pub const bfd_mach_z80: u64 = 3 /* With ixl, ixh, iyl, and iyh. */;
pub const bfd_mach_z80full: u64 = 7 /* All undocumented instructions. */;
pub const bfd_mach_r800: u64 = 11 /* R800: successor with multiplication. */;
pub const bfd_mach_lm32: u64 = 1;
pub const bfd_mach_tilepro: u64 = 1;
pub const bfd_mach_tilegx: u64 = 1;
pub const bfd_mach_tilegx32: u64 = 2;
pub const bfd_mach_aarch64: u64 = 0;
pub const bfd_mach_aarch64_ilp32: u64 = 32;
pub const bfd_mach_nios2: u64 = 0;
pub const bfd_mach_nios2r1: u64 = 1;
pub const bfd_mach_nios2r2: u64 = 2;
pub const bfd_mach_visium: u64 = 1;
pub const bfd_mach_wasm32: u64 = 1;
pub const bfd_mach_pru: u64 = 0;
